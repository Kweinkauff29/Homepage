<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Truck Reservation Form</title>
  <!-- Include the Google API Client Library -->
  <script src="https://apis.google.com/js/api.js"></script>
  <!-- Include EmailJS library -->
  <script src="https://cdn.emailjs.com/dist/email.min.js"></script>

  <script>
  // Initialize EmailJS (replace 'YOUR_USER_ID' with your actual EmailJS user ID)
  (function(){
    emailjs.init("YOUR_USER_ID");
  })();

  // Your Google API credentials (replace with your own!)
  const CLIENT_ID = '414981599348-90gfsa4np9f7c9r2h9v5efgp4l3vqrel.apps.googleusercontent.com';
  const API_KEY = 'AIzaSyBL0lpRvT79wO8uk4KYE-6soSEoxuH2vfs';
  // The scope for Google Calendar
  const SCOPES = 'https://www.googleapis.com/auth/calendar';
  // Calendar ID (from the provided calendar link)
  const CALENDAR_ID = '955573ec7cc1d9dabde3c805ef7e422de882ed526ac51abb9fa8175667d29f4b@group.calendar.google.com';

  // Load the API client and auth library
  function handleClientLoad() {
    gapi.load('client:auth2', initClient);
  }

  function initClient() {
    gapi.client.init({
      apiKey: API_KEY,
      clientId: CLIENT_ID,
      discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"],
      scope: SCOPES
    }).then(function () {
      // Store the auth instance for later use.
      window.authInstance = gapi.auth2.getAuthInstance();
      console.log("Google API client and auth instance initialized.");
    }, function(error) {
      console.error("Error initializing Google API client:", error);
    });
  }

  // Utility: Format a date object to RFC3339 string
  function toRFC3339(date) {
    return date.toISOString();
  }

  // Check availability for a given start and end time
  function checkAvailability(startTime, endTime) {
    return gapi.client.calendar.events.list({
      'calendarId': CALENDAR_ID,
      'timeMin': toRFC3339(startTime),
      'timeMax': toRFC3339(endTime),
      'singleEvents': true,
      'orderBy': 'startTime'
    }).then(function(response) {
      const events = response.result.items;
      return events.length === 0; // Available if no events found
    });
  }

  // Create a calendar event
  function createCalendarEvent(name, email, startTime, endTime) {
    const event = {
      'summary': `Truck Reservation - ${name}`,
      'description': `Reservation for ${name} (${email})`,
      'start': {
        'dateTime': toRFC3339(startTime)
      },
      'end': {
        'dateTime': toRFC3339(endTime)
      }
    };

    return gapi.client.calendar.events.insert({
      'calendarId': CALENDAR_ID,
      'resource': event
    });
  }

  // Send confirmation email using EmailJS
  function sendConfirmationEmail(name, email, dateTime) {
    const templateParams = {
      to_name: name,
      to_email: email,
      reservation_datetime: dateTime.toLocaleString()
    };

    emailjs.send('YOUR_SERVICE_ID', 'YOUR_TEMPLATE_ID', templateParams)
      .then(function(response) {
        console.log('Confirmation email sent!', response.status, response.text);
      }, function(error) {
        console.error('Failed to send confirmation email.', error);
      });
  }

  // Handle form submission
  async function handleSubmit(event) {
    event.preventDefault();

    // Ensure the user is signed in with Google
    if (!window.authInstance) {
      alert("Google API not yet initialized. Please try again shortly.");
      return;
    }
    
    if (!window.authInstance.isSignedIn.get()) {
      await window.authInstance.signIn();
    }

    const name = document.getElementById('name').value;
    const email = document.getElementById('email').value;
    const dateInput = document.getElementById('reservationDate').value; // e.g., "2025-04-15T10:00"
    if (!dateInput) {
      alert("Please select a date and time.");
      return;
    }
    const startTime = new Date(dateInput);
    // Assuming a 1â€‘hour reservation (adjust as needed)
    const endTime = new Date(startTime.getTime() + 60 * 60 * 1000);

    try {
      // Check if the time slot is available
      const available = await checkAvailability(startTime, endTime);
      if (!available) {
        alert("Sorry, that slot is already booked. Please choose another time.");
        return;
      }
      // Create the event in Google Calendar
      await createCalendarEvent(name, email, startTime, endTime);
      // Send a confirmation email
      sendConfirmationEmail(name, email, startTime);
      alert("Reservation successful! A confirmation email has been sent.");
      document.getElementById("reservationForm").reset();
    } catch (error) {
      console.error("Error processing reservation:", error);
      alert("An error occurred. Please try again later.");
    }
  }
</script>


</head>
<body onload="handleClientLoad()">
  <h1>Truck Reservation Form</h1>
  <form id="reservationForm" onsubmit="handleSubmit(event)">
    <label for="name">Name:</label><br/>
    <input type="text" id="name" name="name" required /><br/><br/>

    <label for="email">Email:</label><br/>
    <input type="email" id="email" name="email" required /><br/><br/>

    <label for="reservationDate">Reservation Date & Time:</label><br/>
    <!-- Use a datetime-local input -->
    <input type="datetime-local" id="reservationDate" name="reservationDate" required /><br/><br/>

    <button type="submit">Reserve Truck</button>
  </form>
</body>
</html>
